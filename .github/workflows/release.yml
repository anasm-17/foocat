name: Release

on: 
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      env:
        POETRY_VIRTUALENVS_CREATE: false
      run: |
        pip install poetry
        poetry install
    - name: Test with pytest
      run: |
        poetry run pytest --cov=./ --cov-report=xml
    - name: Upload coverage to Codecov  
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        yml: ./codecov.yml 
        fail_ci_if_error: true
    - name: Bump version
      env:
        PR_BRANCH: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install --upgrade bump2version
        echo $(grep "^version" pyproject.toml | cut -d " " -f 3)
        echo $PR_BRANCH
        echo ${{ github.head_ref }}
        echo "Pull request's base branch is: ${BASE_BRANCH}"
        bump2version --current-version $(grep "^version" pyproject.toml | cut -d " " -f 3) ${{ github.head_ref }}
        poetry version ${{ github.head_ref }}
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "Add changes" -a
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Build and publish
      env:
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        poetry config repositories.foocat https://test.pypi.org/legacy/
        poetry build
        poetry publish -r foocat -u $PYPI_USERNAME -p $PYPI_PASSWORD